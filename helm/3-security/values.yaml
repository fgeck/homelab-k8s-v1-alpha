authentik:
  nameOverride: authentik
  fullnameOverride: authentik
  # Needs my PR to be merged first: https://github.com/goauthentik/helm/pull/316
  namespaceOverride: security
  # This sends anonymous usage-data, stack traces on errors and
  # performance data to authentik.error-reporting.a7k.io, and is fully opt-in
  error_reporting:
    enabled: false
  redis:
    enabled: true
    master:
      persistence:
        size: 2Gi
        # existingClaim: authentik-redis-master-pvc

  worker:
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
      fsGroupChangePolicy: OnRootMismatch
      seccompProfile:
        type: RuntimeDefault
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL

  server:
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
      fsGroupChangePolicy: OnRootMismatch
      seccompProfile:
        type: RuntimeDefault
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
    initContainers:
      - name: init-postgres
        image: bitnami/postgresql:17.2.0
        envFrom:
          - secretRef:
              name: authentik-init-secret-env
        command: ["/bin/sh", "-c"]
        args:
          - |
            #!/bin/bash

            # Use environment variables provided
            PGHOST="${PGHOST}"
            PGUSER="${PGUSER}"
            PGPASSWORD="${PGPASSWORD}"
            MAIN_DB="${AUTHENTIK__POSTGRES__DATABASE}"
            AUTHENTIK_USER="${AUTHENTIK__POSTGRES__USER}"
            AUTHENTIK_PASSWORD="${AUTHENTIK__POSTGRES__PASSWORD}"

            # Set the database to connect to for checks and operations
            DEFAULT_DB="postgres"

            # Maximum time to wait for PostgreSQL to become available (in seconds)
            MAX_WAIT=300
            WAIT_INTERVAL=5

            echo "Checking PostgreSQL connectivity..."

            elapsed=0
            while ! PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DEFAULT_DB" -c '\q' 2>/dev/null; do
                echo "PostgreSQL '$PGHOST' is not available yet. Retrying in $WAIT_INTERVAL seconds..."
                sleep $WAIT_INTERVAL
                elapsed=$((elapsed + WAIT_INTERVAL))
                if [ "$elapsed" -ge "$MAX_WAIT" ]; then
                    echo "Failed to connect to PostgreSQL after $MAX_WAIT seconds."
                    exit 1
                fi
            done

            echo "PostgreSQL is available. Proceeding with database setup."

            # Ensure the user exists
            echo "Ensuring user '$AUTHENTIK_USER' exists..."
            PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DEFAULT_DB" -c "DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = '$AUTHENTIK_USER') THEN CREATE ROLE \"$AUTHENTIK_USER\" WITH LOGIN ENCRYPTED PASSWORD '$AUTHENTIK_PASSWORD'; END IF; END \$\$;"

            # List of databases to process
            DATABASES="$MAIN_DB"

            # Loop through each database
            for DBNAME in $DATABASES; do
                echo "Processing database: $DBNAME"
                
                # Check if the target database exists
                if PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DEFAULT_DB" -tc "SELECT 1 FROM pg_database WHERE datname = '$DBNAME';" | grep -q 1; then
                    echo "Database '$DBNAME' already exists."
                else
                    # Create the database if it doesn't exist
                    PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DEFAULT_DB" -c "CREATE DATABASE \"$DBNAME\";"
                    echo "Database '$DBNAME' created successfully."
                fi

                # Grant permissions on the database
                echo "Granting permissions on database: $DBNAME"
                PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DBNAME" -c "GRANT ALL PRIVILEGES ON DATABASE \"$DBNAME\" TO \"$AUTHENTIK_USER\";"

                # Grant schema permissions on the public schema
                echo "Granting schema permissions for 'public' in database: $DBNAME"
                PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DBNAME" -c "GRANT USAGE, CREATE ON SCHEMA public TO \"$AUTHENTIK_USER\";"
                PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DBNAME" -c "GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO \"$AUTHENTIK_USER\";"
                PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DBNAME" -c "GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO \"$AUTHENTIK_USER\";"

                # Alter default privileges (correct syntax)
                # echo "Setting default privileges for '$AUTHENTIK_USER' in schema 'public' for database: $DBNAME"
                # PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DBNAME" -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO \"$AUTHENTIK_USER\";"
                # PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DBNAME" -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT USAGE, SELECT ON SEQUENCES TO \"$AUTHENTIK_USER\";"
                # PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DBNAME" -c "ALTER DATABASE authentik OWNER TO \"$AUTHENTIK_USER\";"
                echo "Finished processing database: $DBNAME"
            done

            echo "Database setup completed."
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
