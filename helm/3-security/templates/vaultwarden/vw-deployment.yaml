apiVersion: apps/v1
kind: Deployment
metadata:
  name: vaultwarden
  namespace: security
  labels:
    app.kubernetes.io/group: vaultwarden
    app.kubernetes.io/name: vaultwarden
  annotations:
    keel.sh/policy: all
    keel.sh/pollSchedule: '@daily'
    keel.sh/trigger: poll
    meta.helm.sh/release-name: security
    meta.helm.sh/release-namespace: security
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: vaultwarden
  template:
    metadata:
      annotations:
        meta.helm.sh/release-name: security
        meta.helm.sh/release-namespace: security
      labels:
        app.kubernetes.io/name: vaultwarden
    spec:
      securityContext:
        fsGroup: 1000 # This applies to all volumes in the pod
        fsGroupChangePolicy: OnRootMismatch
      containers:
      - name: vaultwarden
        image: docker.io/vaultwarden/server:1.32.7-alpine
        imagePullPolicy: IfNotPresent
        env:
        - name: LOG_LEVEL
          value: "info"
        - name: DATA_FOLDER
          value: "/data"
        - name: DOMAIN
          value: "https://vw.home.{{ .Values.edge.domain }}"
        - name: ROCKET_PORT
          value: "8080"
        - name: ADMIN_TOKEN
          valueFrom:
            secretKeyRef:
              name: vaultwarden-secret
              key: ADMIN_TOKEN
        - name: DISABLE_ADMIN_TOKEN
          value: "false"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: vaultwarden-secret
              key: DATABASE_URL
        volumeMounts:
        - name: data
          mountPath: "/data"
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 3012
          name: websocket
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /alive
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 10
        readinessProbe:
          httpGet:
            path: /alive
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        resources:
          limits:
            cpu: "1"
            memory: 1Gi
          requests:
            cpu: 50m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsGroup: 1000
          runAsUser: 1000
          capabilities:
            drop:
              - ALL
      initContainers:
      - name: init-postgres
        image: postgres:latest
        envFrom:
          - secretRef:
              name: vaultwarden-init-secret-env
        command: ["/bin/sh", "-c"]
        args:
          - |
            #!/bin/bash

            # Use environment variables provided
            PGHOST="${PGHOST}"
            PGUSER="${PGUSER}"
            PGPASSWORD="${PGPASSWORD}"
            MAIN_DB="${VAULTWARDEN__POSTGRES__DATABASE}"
            VAULTWARDEN_USER="${VAULTWARDEN__POSTGRES__USER}"
            VAULTWARDEN_PASSWORD="${VAULTWARDEN__POSTGRES__PASSWORD}"

            # Set the database to connect to for checks and operations
            DEFAULT_DB="postgres"

            # Maximum time to wait for PostgreSQL to become available (in seconds)
            MAX_WAIT=300
            WAIT_INTERVAL=5

            echo "Checking PostgreSQL connectivity..."

            elapsed=0
            while ! PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DEFAULT_DB" -c '\q' 2>/dev/null; do
                echo "PostgreSQL '$PGHOST' is not available yet. Retrying in $WAIT_INTERVAL seconds..."
                sleep $WAIT_INTERVAL
                elapsed=$((elapsed + WAIT_INTERVAL))
                if [ "$elapsed" -ge "$MAX_WAIT" ]; then
                    echo "Failed to connect to PostgreSQL after $MAX_WAIT seconds."
                    exit 1
                fi
            done

            echo "PostgreSQL is available. Proceeding with database setup."

            # Ensure the user exists
            echo "Ensuring user '$VAULTWARDEN_USER' exists..."
            PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DEFAULT_DB" -c "DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = '$VAULTWARDEN_USER') THEN CREATE ROLE \"$VAULTWARDEN_USER\" WITH LOGIN ENCRYPTED PASSWORD '$VAULTWARDEN_PASSWORD'; END IF; END \$\$;"

            # List of databases to process
            DATABASES="$MAIN_DB"

            # Loop through each database
            for DBNAME in $DATABASES; do
                echo "Processing database: $DBNAME"
                
                # Check if the target database exists
                if PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DEFAULT_DB" -tc "SELECT 1 FROM pg_database WHERE datname = '$DBNAME';" | grep -q 1; then
                    echo "Database '$DBNAME' already exists."
                else
                    # Create the database if it doesn't exist
                    PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DEFAULT_DB" -c "CREATE DATABASE \"$DBNAME\";"
                    echo "Database '$DBNAME' created successfully."
                fi

                # Grant permissions on the database
                echo "Granting permissions on database: $DBNAME"
                PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DBNAME" -c "GRANT ALL PRIVILEGES ON DATABASE \"$DBNAME\" TO \"$VAULTWARDEN_USER\";"

                # Grant schema permissions on the public schema
                echo "Granting schema permissions for 'public' in database: $DBNAME"
                PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DBNAME" -c "GRANT USAGE, CREATE ON SCHEMA public TO \"$VAULTWARDEN_USER\";"
                PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DBNAME" -c "GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO \"$VAULTWARDEN_USER\";"
                PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DBNAME" -c "GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO \"$VAULTWARDEN_USER\";"

                # Alter default privileges (correct syntax)
                # echo "Setting default privileges for '$VAULTWARDEN_USER' in schema 'public' for database: $DBNAME"
                # PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DBNAME" -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO \"$VAULTWARDEN_USER\";"
                # PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DBNAME" -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT USAGE, SELECT ON SEQUENCES TO \"$VAULTWARDEN_USER\";"
                # PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DBNAME" -c "ALTER DATABASE $DBNAME OWNER TO \"$VAULTWARDEN_USER\";"
                echo "Finished processing database: $DBNAME"
            done

            echo "Database setup completed."
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: vaultwarden-pvc
