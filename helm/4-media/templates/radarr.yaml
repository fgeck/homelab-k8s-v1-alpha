apiVersion: v1
kind: Service
metadata:
  name: radarr
  labels:
    app.kubernetes.io/name: radarr
spec:
  selector:
    app.kubernetes.io/name: radarr
  ports:
    - protocol: TCP
      port: 7878
      targetPort: 7878
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    keel.sh/policy: all
    keel.sh/pollSchedule: '@daily'
    keel.sh/trigger: poll
  labels:
    app.kubernetes.io/name: radarr
  name: radarr
  namespace: media
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: radarr
  progressDeadlineSeconds: 600
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: radarr
    spec:
      initContainers:
        - name: init-postgres
          image: postgres:latest
          envFrom:
            - configMapRef:
                name: radarr-env
            - secretRef:
                name: radarr-secret-env
          command: ["/bin/sh", "-c"]
          args:
            - |
              #!/bin/bash
              # Use environment variables provided
              PGHOST="${PGHOST}"
              PGUSER="${PGUSER}"
              PGPASSWORD="${PGPASSWORD}"
              LOG_DB="${LOG_DB}"
              MAIN_DB="${MAIN_DB}"

              # Set the database to connect to for checks and operations
              DEFAULT_DB="postgres"

              # List of databases to process
              DATABASES="$LOG_DB $MAIN_DB"

              # Loop through each database
              for DBNAME in $DATABASES; do
                  echo "Processing database: $DBNAME"
                  
                  # Check if the target database exists
                  if PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DEFAULT_DB" -tc "SELECT 1 FROM pg_database WHERE datname = '$DBNAME';" | grep -q 1; then
                      echo "Database '$DBNAME' already exists."
                  else
                      # Create the database if it doesn't exist
                      PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DEFAULT_DB" -c "CREATE DATABASE \"$DBNAME\";"
                      echo "Database '$DBNAME' created successfully."
                  fi

                  # Attempt to create user and grant permissions on the created DB
                  PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DEFAULT_DB" -c "CREATE USER \"$RADARR__POSTGRES_USER\" WITH PASSWORD '$RADARR__POSTGRES_PASSWORD';" || true
                  PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DEFAULT_DB" -c "CREATE SCHEMA IF NOT EXISTS \"$DBNAME\";" || true
                  PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DEFAULT_DB" -c "ALTER SCHEMA \"$DBNAME\" OWNER TO \"$RADARR__POSTGRES_USER\";" || true
                  PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DEFAULT_DB" -c "GRANT USAGE ON SCHEMA \"$DBNAME\" TO \"$RADARR__POSTGRES_USER\";" || true
                  PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DEFAULT_DB" -c "GRANT CREATE ON SCHEMA \"$DBNAME\" TO \"$RADARR__POSTGRES_USER\";" || true
                  PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DEFAULT_DB" -c "GRANT ALL PRIVILEGES ON DATABASE \"$DBNAME\" TO \"$RADARR__POSTGRES_USER\";" || true
                  PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DEFAULT_DB" -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA \"$DBNAME\" TO \"$RADARR__POSTGRES_USER\";" || true
                  PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DEFAULT_DB" -c "GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA \"$DBNAME\" TO \"$RADARR__POSTGRES_USER\";" || true
                  PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DEFAULT_DB" -c "ALTER ROLE \"$RADARR__POSTGRES_USER\" SET search_path = \"$DBNAME\";" || true
                  
                  echo "Finished processing database: $DBNAME"
              done
      containers:
      - name: main
        env:
        - name: TZ
          value: Europe/Berlin
        envFrom:
        - configMapRef:
            name: radarr-env
        - secretRef:
            name: radarr-secret-env
        image: ghcr.io/onedr0p/radarr:5.16.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /ping
            port: 7878
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        ports:
        - containerPort: 7878
          name: main
          protocol: TCP
        readinessProbe:
          failureThreshold: 5
          httpGet:
            path: /ping
            port: 7878
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 2
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "2"
            memory: 1Gi
          requests:
            cpu: 10m
            memory: 50Mi
        securityContext:
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
        startupProbe:
          failureThreshold: 60
          httpGet:
            path: /ping
            port: 7878
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 2
        volumeMounts:
        - mountPath: /config
          name: radarr-config
        - mountPath: /mnt/data
          name: data
      dnsConfig:
        options:
        - name: ndots
          value: "1"
      restartPolicy: Always
      terminationGracePeriodSeconds: 60
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: OnRootMismatch
      volumes:
      - name: radarr-config
        persistentVolumeClaim:
          claimName: radarr-pvc
      - name: data
        persistentVolumeClaim:
          claimName: downloads-data-pvc
