apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    keel.sh/policy: all
    keel.sh/pollSchedule: '@daily'
    keel.sh/trigger: poll
  labels:
    app.kubernetes.io/name: radarr
  name: radarr
  namespace: media
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: radarr
  progressDeadlineSeconds: 600
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: radarr
    spec:
      initContainers:
        - name: init-postgres
          image: postgres:latest
          envFrom:
            - configMapRef:
                name: radarr-env
            - secretRef:
                name: radarr-init-secret-env
          command: ["/bin/sh", "-c"]
          args:
            - |
              #!/bin/bash

              # Use environment variables provided
              PGHOST="${PGHOST}"
              PGUSER="${PGUSER}"
              PGPASSWORD="${PGPASSWORD}"
              LOG_DB="${LOG_DB}"
              MAIN_DB="${MAIN_DB}"
              RADARR_USER="${RADARR__POSTGRES__USER}"
              RADARR_PASSWORD="${RADARR__POSTGRES__PASSWORD}"

              # Set the database to connect to for checks and operations
              DEFAULT_DB="postgres"

              # Maximum time to wait for PostgreSQL to become available (in seconds)
              MAX_WAIT=300
              WAIT_INTERVAL=5

              echo "Checking PostgreSQL connectivity..."

              elapsed=0
              while ! PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DEFAULT_DB" -c '\q' 2>/dev/null; do
                  echo "PostgreSQL is not available yet. Retrying in $WAIT_INTERVAL seconds..."
                  sleep $WAIT_INTERVAL
                  elapsed=$((elapsed + WAIT_INTERVAL))
                  if [ "$elapsed" -ge "$MAX_WAIT" ]; then
                      echo "Failed to connect to PostgreSQL after $MAX_WAIT seconds."
                      exit 1
                  fi
              done

              echo "PostgreSQL is available. Proceeding with database setup."

              # Ensure the user exists
              echo "Ensuring user '$RADARR_USER' exists..."
              PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DEFAULT_DB" -c "DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = '$RADARR_USER') THEN CREATE ROLE \"$RADARR_USER\" WITH LOGIN PASSWORD '$RADARR_PASSWORD'; END IF; END \$\$;"

              # List of databases to process
              DATABASES="$LOG_DB $MAIN_DB"

              # Loop through each database
              for DBNAME in $DATABASES; do
                  echo "Processing database: $DBNAME"
                  
                  # Check if the target database exists
                  if PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DEFAULT_DB" -tc "SELECT 1 FROM pg_database WHERE datname = '$DBNAME';" | grep -q 1; then
                      echo "Database '$DBNAME' already exists."
                  else
                      # Create the database if it doesn't exist
                      PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DEFAULT_DB" -c "CREATE DATABASE \"$DBNAME\";"
                      echo "Database '$DBNAME' created successfully."
                  fi

                  # Grant permissions on the database
                  echo "Granting permissions on database: $DBNAME"
                  PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DBNAME" -c "GRANT ALL PRIVILEGES ON DATABASE \"$DBNAME\" TO \"$RADARR_USER\";"

                  # Grant schema permissions on the public schema
                  echo "Granting schema permissions for 'public' in database: $DBNAME"
                  PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DBNAME" -c "GRANT USAGE, CREATE ON SCHEMA public TO \"$RADARR_USER\";"
                  PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DBNAME" -c "GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO \"$RADARR_USER\";"
                  PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DBNAME" -c "GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO \"$RADARR_USER\";"

                  # Alter default privileges (correct syntax)
                  echo "Setting default privileges for '$RADARR_USER' in schema 'public' for database: $DBNAME"
                  PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DBNAME" -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO \"$RADARR_USER\";"
                  PGPASSWORD=$PGPASSWORD psql -h "$PGHOST" -U "$PGUSER" -d "$DBNAME" -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT USAGE, SELECT ON SEQUENCES TO \"$RADARR_USER\";"

                  echo "Finished processing database: $DBNAME"
              done

              echo "Database setup completed."
      containers:
      - name: main
        env:
        - name: TZ
          value: Europe/Berlin
        envFrom:
        - configMapRef:
            name: radarr-env
        - secretRef:
            name: radarr-secret-env
        image: ghcr.io/onedr0p/radarr:5.16.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /ping
            port: 7878
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        ports:
        - containerPort: 7878
          name: main
          protocol: TCP
        readinessProbe:
          failureThreshold: 5
          httpGet:
            path: /ping
            port: 7878
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 2
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "2"
            memory: 1Gi
          requests:
            cpu: 10m
            memory: 50Mi
        securityContext:
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
        startupProbe:
          failureThreshold: 60
          httpGet:
            path: /ping
            port: 7878
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 2
        volumeMounts:
        - mountPath: /config
          name: radarr-config
        - mountPath: /mnt/data
          name: data
      dnsConfig:
        options:
        - name: ndots
          value: "1"
      restartPolicy: Always
      terminationGracePeriodSeconds: 60
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: OnRootMismatch
      volumes:
      - name: radarr-config
        persistentVolumeClaim:
          claimName: radarr-pvc
      - name: data
        persistentVolumeClaim:
          claimName: media-data-pvc
